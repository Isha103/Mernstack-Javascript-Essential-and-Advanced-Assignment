 What is an object in JavaScript? How are objects different from arrays? 


An object in JavaScript is a collection of key-value pairs. It allows you to group related data and functions together. Keys (also called properties) are usually strings, and the values can be of any data type: numbers, strings, arrays, other objects, or even functions.

Syntax for creating an object:

const person = {
    name: "Riya",
    age: 25,
    isStudent: false,
    greet: function() {
        console.log("Hello, my name is " + this.name);
    }
};

console.log(person.name); // Output: Riya
person.greet(); // Output: Hello, my name is Riya


=> How are objects different from arrays?

Arrays and objects are both data structures in JavaScript, but they serve different purposes and have different characteristics:

=> Arrays are ordered collections of values, while objects are unordered collections of key-value pairs.
=> Arrays are indexed by numeric indices, while objects are indexed by string keys (or Symbols).
=> Arrays have built-in methods for manipulating ordered data, while objects have methods for managing key-value pairs.
=> Arrays are typically used for lists of items, while objects are used for representing entities with properties and behaviors.

Structure:

Objects: Use key-value pairs. Keys are strings (or Symbols), and values can be of any type.
Arrays: Are ordered collections of values, where each value is accessed by its index (a number).

Use Case:

Objects: Typically used to represent entities with properties and behaviors (e.g., a person, a car).
Arrays: Used to store lists of items (e.g., a list of numbers, a collection of strings).

Accessing Elements:

Objects: Access properties using dot notation (object.property) or bracket notation (object["property"]).
Arrays: Access elements using their index (array[index]).

Order:

Objects: Do not maintain order of properties. The order of keys is not guaranteed.
Arrays: Maintain the order of elements based on their index.
